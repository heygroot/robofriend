{"version":3,"sources":["components/Card.js","components/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","style","width","height","src","alt","SearchBox","onSearchChange","minWidth","onChange","type","placeholder","App","props","e","text","target","value","robotArray","state","roboList","filter","robot","toLowerCase","includes","setState","robots","searchField","fetch","then","response","json","users","this","map","user","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAeeA,MAZf,YAAiC,EAAlBC,GAAmB,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACrB,OACI,sBAAKC,UAAU,yBAAf,UACI,qBAAKC,MAAO,CAACC,MAAO,QAASC,OAAQ,SAASC,IAAG,+BAA0BN,EAA1B,qBAAmDO,IAAG,UACvG,sBAAKL,UAAU,OAAf,UACI,6BAAKF,IACL,4BAAIC,WCKLO,EAZG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,eAChB,OACI,qBAAKP,UAAU,uCAAuCC,MAAO,CAACO,SAAU,SAAxE,SACI,uBAAOR,UAAU,eACbS,SAAUF,EACVG,KAAK,SACLC,YAAY,qBCiDbC,E,kDAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVN,eAAiB,SAACO,GACd,IAAIC,EAAOD,EAAEE,OAAOC,MAChBC,EAAa,EAAKC,MAAMC,SAASC,QAAO,SAACC,GACzC,OAAOA,EAAMxB,KAAKyB,cAAcC,SAAST,EAAKQ,kBAElD,EAAKE,SAAS,CACVC,OAAQR,EACRS,YAAaZ,KAdjB,EAAKI,MAAQ,CACTC,SAAU,GACVM,OAAQ,GACRC,YAAa,IALF,E,qDAoBnB,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEL,SAAUY,EAAON,OAAQM,S,oBAGhE,WACI,OACI,sBAAKhC,UAAU,MAAf,UACI,gCACI,6CACA,cAAC,EAAD,CAAWO,eAAgB0B,KAAK1B,iBAChC,0BAEJ,qBAAKP,UAAU,0BAAf,SACI,qBAAKA,UAAU,8CAAf,SAEQiC,KAAKd,MAAMO,OAAOQ,KAAI,SAAAC,GAClB,OAAO,cAAC,EAAD,CAAoBtC,GAAIsC,EAAKtC,GAAIC,KAAMqC,EAAKrC,KAAMC,MAAOoC,EAAKpC,OAAnDoC,EAAKtC,kB,GAvCrCuC,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e3018614.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card({id, name, email}) {\r\n    return (\r\n        <div className='card robo shadow width' >\r\n            <img style={{width: '12rem', height: '12rem'}}src={`https://robohash.org/${name}.png?size=200x200`} alt={`robot`}/>\r\n            <div className='mt-3'>\r\n                <h3>{name}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) =>{\r\n    return (\r\n        <div className='input-group col-12 w-25 mx-auto pb-6' style={{minWidth: '200px'}}>\r\n            <input className='form-control'\r\n                onChange={onSearchChange}\r\n                type='search'\r\n                placeholder='search robots'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\nimport './App.css';\nimport Card from './components/Card';\n//import {robots} from './robots';\nimport SearchBox from './components/SearchBox';\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            roboList: [],\n            robots: [],\n            searchField: \"\"\n        }\n    }\n\n    onSearchChange = (e) => {\n        let text = e.target.value;\n        let robotArray = this.state.roboList.filter((robot) => {\n            return robot.name.toLowerCase().includes(text.toLowerCase())\n        })\n        this.setState({\n            robots: robotArray,\n            searchField: text\n        })\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ roboList: users, robots: users}));\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    <h1>ROBOFRIENDS</h1>\n                    <SearchBox onSearchChange={this.onSearchChange}/>\n                    <hr/>\n                </div>\n                <div className='container-fluid mx-auto'>\n                    <div className='d-flex flex-row flex-wrap bd-highlight mb-3'>\n                        {\n                            this.state.robots.map(user => {\n                                return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}